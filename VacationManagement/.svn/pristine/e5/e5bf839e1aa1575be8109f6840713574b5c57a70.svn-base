package com.dayside.vacation.vacation.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.dayside.vacation.member.service.MemberService;
import com.dayside.vacation.vacation.model.Vacation;
import com.dayside.vacation.vacation.service.VacationService;

@Controller
@RequestMapping("/vacation/*")
public class VacationController {

	private static final Logger LOGGER = LoggerFactory.getLogger(VacationController.class);

	@Autowired
	MemberService memberService;
	@Autowired
	VacationService vacationService;

	// 휴가 신청 목록 페이지
	@RequestMapping("/list")
	public ModelAndView listPage(HttpSession session) {
		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/list");
		LOGGER.debug("휴가 신청 페이지 컨트롤러");
		return listView;

	}

	// 휴가 목록 가져오기
	@RequestMapping(value = "/search_vacation", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView searchVacation(HttpSession session, String searchWord, String selectYear, int currPage) {
		
		if(currPage <1) {
			currPage = 1;
		}
		
		LOGGER.debug("선택연도: {}",selectYear);
		
		String employeeNo = (String) session.getAttribute("memberSession");

		String leaderYN = memberService.getLeaderYN(employeeNo);

		if (leaderYN.equals("Y")) {
			employeeNo = null;
		}

		List<Map<String, Object>> list = vacationService.getVacationInfo(employeeNo, searchWord, selectYear, currPage);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");
		jsonView.addObject("list", list);
		LOGGER.debug("휴가 목록 가져오기 컨트롤러");
		return jsonView;
	}

	// 휴가 신청 페이지
	@RequestMapping(value = "/request")
	public ModelAndView requestPage(HttpSession session) {

		String employeeNo = (String) session.getAttribute("memberSession");

		Map<String, Object> map = memberService.getNoName(employeeNo);

		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/request_page");
		listView.addObject("map", map);

		return listView;
	}

	// 휴가 신청 처리
	@RequestMapping(value = "/request_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView requestProcess(String startDate, String startType, String endDate, String endType,
			HttpSession session) throws ParseException {
		
		// 공휴일
		String[] holidays = {"2020-12-25","2020-12-31", "2021-01-01", "2021-02-11", "2021-02-12", "2021-03-01", "2021-05-05", "2021-05-19", "2021-09-20", "2021-09-21", "2021-09-22", "2021-12-31"};
		String employeeNo = (String) session.getAttribute("memberSession");

		Vacation vacation = new Vacation();
		vacation.setEmployeeNo(employeeNo);

		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");

		Date startDt = fm.parse(startDate);
		Date endDt = fm.parse(endDate);

		long calDate = endDt.getTime() - startDt.getTime();
		int calDateDays = (int) (calDate / (24 * 60 * 60 * 1000));
		float half = 0.5f;

		if (endType == null) {
			endType = "-";
		}

		vacation.setStartDt(startDt);
		vacation.setEndDt(endDt);
		vacation.setStartType(startType);
		vacation.setEndType(endType);

		// 시작일 = 종료일
		if (calDateDays == 0) {
			// 시작일: 종일
			if (!startType.equals("ALLDAY")) {
				vacation.setCountDays(half);
				// 시작일: 오전 or 오후
			} else {
				vacation.setCountDays(calDateDays + 1);
			}
			// 종료일 - 시작일 = 1
		} else if (calDateDays == 1) {
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + 1);
					// 종료일: 오후
				} else {
					vacation.setCountDays(calDateDays + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + half);
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + half);
				}
			}
			// 종료일 - 시작일 > 1
		} else if (calDateDays > 1) {

			// 기간 중 주말, 공휴일 빼기
			Calendar start = Calendar.getInstance();
			start.setTime(startDt);
			Calendar end = Calendar.getInstance();
			end.setTime(endDt);
			int weekday = 0;
			
			while (!start.after(end)) {
				int day = start.get(Calendar.DAY_OF_WEEK);
				if ((day != Calendar.SATURDAY) && (day != Calendar.SUNDAY)) {
					weekday++;
				}
				
				for(int i=0; i<holidays.length; i++) {
					
					Date holiday = fm.parse(holidays[i]);
					Calendar test = Calendar.getInstance();
					test.setTime(holiday);
					if(start.compareTo(test) == 0) {
						LOGGER.debug("공휴일 당첨!: "+test);
						weekday--;
					}
				}
				
				start.add(Calendar.DATE, 1);
			}
			
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(weekday);
					// 종료일: 오후
				} else {
					vacation.setCountDays((weekday - 1) + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(half + (weekday - 1));
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + (weekday - 2) + half);
				}
			}
		}

		vacationService.requestVacation(vacation);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");

		return jsonView;
	}

	// 휴가 승인 수
	@RequestMapping(value = "/count_vacation", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView countVacation(HttpSession session) {

		String employeeNo = (String) session.getAttribute("memberSession");
		float cnt = vacationService.getVacationCount(employeeNo);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");
		jsonView.addObject("cnt", cnt);

		return jsonView;
	}

	// 휴가 취소
	@RequestMapping(value = "/cancel_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView cancelProcess(String applyNo) {
		vacationService.cancelVacation(applyNo);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");

		return jsonView;

	}

	// 휴가 수정 페이지
	@RequestMapping(value = "/update_page")
	public ModelAndView updatePage(String applyNo) {
		Map<String, Object> map = vacationService.getOneVacationInfo(applyNo);
		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/update_page");
		listView.addObject("vacationInfo", map);

		return listView;
	}

	// 휴가 수정 처리
	@RequestMapping(value = "/update_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView updateProcess(String applyNo, String startDate, String startType, String endDate,
			String endType, HttpSession session) throws ParseException {

		Vacation vacation = new Vacation();

		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");

		Date startDt = fm.parse(startDate);
		Date endDt = fm.parse(endDate);

		long calDate = endDt.getTime() - startDt.getTime();
		int calDateDays = (int) (calDate / (24 * 60 * 60 * 1000));
		float half = 0.5f;

		if (endType == null) {
			endType = "-";
		}

		vacation.setVacationApplyNo(applyNo);
		vacation.setStartDt(startDt);
		vacation.setEndDt(endDt);
		vacation.setStartType(startType);
		vacation.setEndType(endType);

		// 시작일 = 종료일
		if (calDateDays == 0) {
			// 시작일: 종일
			if (!startType.equals("ALLDAY")) {
				vacation.setCountDays(half);
				// 시작일: 오전 or 오후
			} else {
				vacation.setCountDays(calDateDays + 1);
			}
			// 종료일 - 시작일 = 1
		} else if (calDateDays == 1) {
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + 1);
					// 종료일: 오후
				} else {
					vacation.setCountDays(calDateDays + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + half);
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + half);
				}
			}
			// 종료일 - 시작일 > 1
		} else if (calDateDays > 1) {
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + 1);
					// 종료일: 오후
				} else {
					vacation.setCountDays(calDateDays + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(half + calDateDays);
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + calDateDays - 1 + half);
				}
			}
		}

		vacationService.updateVacation(vacation);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");

		return jsonView;
	}

	// 휴가 상태
	@RequestMapping(value = "/vacation_status", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView vacationStatus(HttpSession session, String applyNo) {

		Map<String, Object> map = vacationService.getVacationStatus(applyNo);

		String employeeNo = (String) session.getAttribute("memberSession");

		ModelAndView jsonView = new ModelAndView();

		if (employeeNo.equals(map.get("employeeNo"))) {
			jsonView.setViewName("jsonView");
			jsonView.addObject("status", map.get("vacationStatus"));
		}
		return jsonView;
	}

	// 테스트 페이지
	@RequestMapping("/test")
	public ModelAndView testPage(HttpSession session) {
		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/test_page");
		LOGGER.debug("테스트 페이지 컨트롤러");
		return listView;

	}
	// 총 게시물 수, 총 승인 휴가 수
	@RequestMapping(value = "/count_all_vacation", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView countAllVacation(HttpSession session, String searchWord, String selectYear) {

		String employeeNo = (String) session.getAttribute("memberSession");

		String leaderYN = memberService.getLeaderYN(employeeNo);

		if (leaderYN.equals("Y")) {
			employeeNo = null;
		}

		
		int cntAllVacation = vacationService.getAllVacationCount(employeeNo, searchWord, selectYear);
		float cntApprovalDays = vacationService.getApprovalVacationDays(employeeNo, searchWord, selectYear);
		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");
		jsonView.addObject("cntAllVacation", cntAllVacation);
		jsonView.addObject("cntApprovalDays", cntApprovalDays);

		return jsonView;
	}
	
}
