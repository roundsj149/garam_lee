package com.dayside.vacation.member.service;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dayside.vacation.common.util.HashGeneration;
import com.dayside.vacation.common.util.SaltGeneration;
import com.dayside.vacation.member.mapper.MemberMapper;
import com.dayside.vacation.member.model.Auth;
import com.dayside.vacation.member.model.Member;

@Service
public class MemberService {

	private static final Logger logger = LoggerFactory.getLogger(MemberService.class);

	@Autowired
	MemberMapper memberMapper;

	// 회원 가입
	public void joinMember(Member member, Auth auth) {

		// 비밀번호 salt + hash
		String hashedPw = null;
		byte[] saltByte = null;
		String salt = null;

		SaltGeneration saltGeneration = new SaltGeneration();
		HashGeneration hash = new HashGeneration();

		try {
			saltByte = saltGeneration.saltGeneration();
			hashedPw = hash.hashGeneration(member.getPw(), saltByte);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		salt = new String(Base64.getEncoder().encode(saltByte));
		member.setPw(hashedPw);
		member.setHashSalt(salt.toString());

		memberMapper.insertMemberInfo(member);
		auth.setEmployeeNo(member.getEmployeeNo());
		memberMapper.insertAuthInfo(auth);
	}

	// 로그인
	public Map<String, Object> getOneMember(Member member) {

		// 일치하는 아이디 있는지 먼저 확인 -> 해당 salt 가져와서 입력받은 pw로 해시한 후 비밀번호 같은지 확인해야 하므로!
		Map<String, Object> map = memberMapper.selectId(member);
		// 일치하는 아이디 없음 - 로그인 실패
		if (map == null) {

			return null;

			// 일치하는 아이디 있음
		} else {
			String hashedPw = null;
			String salt = (String) map.get("hashSalt");
			HashGeneration hash = new HashGeneration();

			try {
				hashedPw = hash.hashGeneration(member.getPw(), Base64.getDecoder().decode(salt));
			} catch (NoSuchAlgorithmException e) {

				e.printStackTrace();
			} catch (UnsupportedEncodingException e) {

				e.printStackTrace();
			}

			// 비밀번호 맞음 - 로그인 절반 성공(상태 확인 안했음 - controller에서!)
			if (hashedPw.equals(map.get("pw"))) {

				return map;
			} else {
				// 비밀번호 틀림 - 로그인 실패
				return null;
			}
		}
	}

	// 사번 중복확인
	public String checkEmployeeNo(String employeeNo) {

		return memberMapper.selectEmployeeNo(employeeNo);
	}

	// 아이디 중복 확인
	public String checkEmailId(String emailId) {

		return memberMapper.selectEmailId(emailId);
	}

	// 소속팀명 가져오기
	public List<String> getAllTeam() {

		return memberMapper.selectAllTeam();
	}

	// 사번, 이름 가져오기
	public Map<String, Object> getNoName(String employeeNo) {

		return memberMapper.selectNoName(employeeNo);

	}

	// 관리자 여부 확인
	public String getAdminYN(String employeeNo) {

		return memberMapper.selectAdminYN(employeeNo);
	}

	// 비밀번호, salt 가져오기
	public Map<String, Object> getPwSalt(String employeeNo) {

		return memberMapper.selectPwSalt(employeeNo);
	}

	// 비밀번호 변경
	public void updatePw(String pw, String salt, String employeeNo) {
		
		String hashedPw = null;
		HashGeneration hash = new HashGeneration();

		try {
			hashedPw = hash.hashGeneration(pw, Base64.getDecoder().decode(salt));
		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {

			e.printStackTrace();
		}
		
		memberMapper.updatePw(hashedPw, employeeNo);
	}
	
	// 인증키 인증 업데이트
	public void authCertification(String authKey) {
		memberMapper.updateAuthKey(authKey);
	}
	
	// 인증 정보 가져오기
	public String getAuthCertification(String employeeNo) {
		return memberMapper.getAuthCertification(employeeNo);
	}
	
	// 인증키 존재 여부 확인
	public boolean selectAuthKey(String authKey) {
		int cnt = memberMapper.selectAuthKey(authKey);
		if(cnt <= 0) {
			return false;
		} else {
			return true;
		}
	}
}