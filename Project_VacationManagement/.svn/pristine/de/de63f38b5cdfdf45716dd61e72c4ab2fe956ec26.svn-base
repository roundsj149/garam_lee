package com.dayside.vacation.member.controller;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.dayside.vacation.member.model.BaseResult;
import com.dayside.vacation.member.model.Member;
import com.dayside.vacation.member.service.MemberService;

@Controller
//@RequestMapping("/")
public class MemberController {

	private static final Logger LOGGER = LoggerFactory.getLogger(MemberController.class);

	@Autowired
	MemberService memberService;

	// 로그인 페이지(메인 페이지)
	@RequestMapping(value = "/")
	public ModelAndView loginPage(HttpSession session) {
		LOGGER.debug("로거q ");
		// 로그인 된 상태이면 리스트 페이지로 이동시키기
		if (session.getAttribute("memberSession") != null) {

			ModelAndView listView = new ModelAndView();
			listView.setViewName("redirect:/list");

			return listView;
		}

		ModelAndView loginView = new ModelAndView();
		loginView.setViewName("member/login_page");

		return loginView;
	}

	// 로그인 처리
	@RequestMapping(value = "/login_process", method = RequestMethod.POST) // , produces = "application/json;
																			// charset=utf-8"
	@ResponseBody
	public String loginProcess(String emailId, String pw, HttpSession session) {
		LOGGER.debug("로거w ");
		Member member = memberService.getOneMember(emailId, pw);
		
		// 아이디, 비밀번호는 맞음
		if (member != null) {

			if (member.getJoinStatus().equals("JOIN_REQUEST")) {
				
				// 가입 요청
				return "JOIN_REQUEST";

			} else if (member.getJoinStatus().equals("JOIN_REJECT")) {

				// 반려
				return "JOIN_REJECT";

			} else {

				session.setAttribute("memberSession", member.getEmployeeNo());
				LOGGER.debug("로거: "+member.getEmployeeNo());
				System.out.println("system.out은 잘나오는데 logger는 안됨 ㅠㅠ");
				return "JOIN_APPROVAL";

			}
			// 아이디, 비밀번호 틀림
		} else {

			return "FAIL";
		}
	}

	// 회원가입 페이지
	@RequestMapping(value = "/join")
	public ModelAndView joinPage(HttpSession session) {

		ModelAndView loginView = new ModelAndView();
		loginView.setViewName("member/join_page");

		// 로그인 된 상태이면 리스트 페이지로 이동시키기
		if (session.getAttribute("memberSession") != null) {

			ModelAndView listView = new ModelAndView();
			listView.setViewName("redirect:/list");

			return listView;
		}

		return loginView;
	}

	// 회원가입 처리
	@RequestMapping(value = "/join_process", method = RequestMethod.POST) // , produces = "application/json;
																			// charset=utf-8"
	@ResponseBody
	public String joinProcess(Member member, String pwCheck) {

		// 유효성 검사 및 중복 확인
		String employeeNoRegExp = "^[0-9]{6}$";
		String idRegExp = "^[a-zA-Z0-9-_.]{1,20}@dayside.co.kr$";
		String fullnameRegExp = "^[가-힣]{2,5}$";
		String no = memberService.checkEmployeeNo(member.getEmployeeNo());
		String id = memberService.checkEmailId(member.getEmailId());
		String[] team = memberService.getAllTeam();

		// 사번 유효성 검사 및 중복 확인
		if (member.getEmployeeNo().matches(employeeNoRegExp) == false || member.getEmployeeNo().equals(no)) {
			return "NO_FAIL";
		}
		// 아이디 유효성 검사 및 중복 확인
		if (member.getEmailId().matches(idRegExp) == false || member.getEmailId().equals(id)) {
			return "ID_FAIL";
		}
		// 이름 유효성 검사
		if (member.getFullname().matches(fullnameRegExp) == false) {
			return "FULLNAME_FAIL";
		}
		// 비밀번호 유효성 검사
		if (member.getPw().length() < 8) {
			return "PW_FAIL";
		}
		// 비밀번호 확인
		if (!(member.getPw().equals(pwCheck))) {
			return "PWCHECK_FAIL";
		}
		// 소속팀 유효성 검사
		int cnt = 0;
		for (int i = 0; i < team.length; i++) {
			if ((member.getTeam().equals(team[i]))) {
				cnt++;
				break;
			}
		}
		if (cnt < 1) {
			cnt = 0;
			return "TEAM_FAIL";
		}

		// 팀장, 관리자 여부 유효성 검사
		if (!(member.getLeaderYn().equals("Y")) && !(member.getLeaderYn().equals("N"))) {
			return "LEADERYN_FAIL";
		}

		if (!(member.getAdminYn().equals("Y")) && !(member.getAdminYn().equals("N"))) {
			return "ADMINYN_FAIL";
		}
		// 가입 성공 - 유효성 검사 완료 및 null 아님
		if (member.getEmployeeNo() != null && member.getEmailId() != null && member.getFullname() != null
				&& member.getPw() != null && pwCheck != null && !(member.getTeam().equals("DEFAULT"))) {

			memberService.joinMember(member);

			return "SUCCESS";
		}
		return "FAIL";
	}

	// 로그아웃
	@RequestMapping(value = "/logout")
	public ModelAndView logoutProcess(HttpSession session) {

		ModelAndView loginView = new ModelAndView();
		loginView.setViewName("redirect:/");

		session.removeAttribute("memberSession");
		session.invalidate();

		return loginView;
	}

	// 사번 중복 확인
	@RequestMapping(value = "/checkEmployeeNo_process", method = RequestMethod.POST) // produces = "application/json;
	@ResponseBody
	public String checkNo(String employeeNo) {

		String no = memberService.checkEmployeeNo(employeeNo);
		// 중복된 사번 없음
		if (no == null) {
			LOGGER.debug("입력 받은 사번: {}", employeeNo);
			return "AVAILABLE";
			// 중복된 사번 있음
		} else {
			return "DISAVAILABLE";
		}
	}

	// 아이디 중복 확인
	@RequestMapping(value = "/checkEmailId_process", method = RequestMethod.POST) // produces = "application/json;
																					// charset=utf-8"
	@ResponseBody
	public String checkId(String emailId) {

		String id = memberService.checkEmailId(emailId);

		// 중복된 아이디 없음
		if (id == null) {
			LOGGER.debug("입력 받은 아이디: {}", emailId);
			return "AVAILABLE";
			// 중복된 아이디 있음
		} else {
			return "DISAVAILABLE";
		}

	}

	// 임시 테스트 휴가접수 번호 연번 테스트
	@RequestMapping(value = "/regVacationAjax", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest() {

		memberService.applyNoTest();

		BaseResult result = new BaseResult("SUCCESS", "성공");

//  ModelAndView 사용 	
//		ModelAndView modelAndView = new ModelAndView();
//		HashMap<String, String> result = new HashMap<>();
//		result.put("reslut", "SUCCESS");
//		modelAndView.addObject(result);
//		modelAndView.setViewName("jsonView");

		return result;
	}

	@RequestMapping(value = "/regVacationAjax1", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest1() {
		memberService.applyNoTest1();
		BaseResult result = new BaseResult("SUCCESS", "성공");
		return result;
	}

	// YYMMDD-0001-랜덤문자(체크성 문자 - )

	@RequestMapping(value = "/regVacationAjax2", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest2() {
		memberService.applyNoTest2();
		BaseResult result = new BaseResult("SUCCESS", "성공");
		return result;
	}

}
