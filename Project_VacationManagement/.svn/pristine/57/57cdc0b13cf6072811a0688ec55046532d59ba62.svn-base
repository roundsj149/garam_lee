package com.dayside.vacation.common.filter;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.dayside.vacation.common.util.HttpRequestWrapper;
import com.dayside.vacation.common.util.HttpResponseWrapper;
import com.dayside.vacation.member.model.BaseResult;
import com.dayside.vacation.member.service.MemberService;
@Component("JoinCheckFilter")
public class JoinCheckFilter implements Filter {

	private static final Logger LOGGER = LoggerFactory.getLogger(JoinCheckFilter.class);
	
	@Autowired
	MemberService memberService;

	@Override
	public void destroy() {
		// TODO Auto-generated method stub

	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// TODO Auto-generated method stub
		String FilterParam = filterConfig.getInitParameter("encoding");
		LOGGER.debug("FilterParam : "+FilterParam);

	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		LOGGER.debug("회원가입 필터 시작");
		BaseResult result = null;
		
		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;
		
		String endPoint = req.getRequestURI();
    	LOGGER.debug("Filter preFilter Chain  endPoint :  {}  =============================",  endPoint);   	
    	
    	HttpRequestWrapper requestWrapper = new HttpRequestWrapper(req);
		HttpResponseWrapper responseWrapper = new HttpResponseWrapper(resp);
		LOGGER.debug("Filter preFilter Chain  EmailId :  {}  =============================",  requestWrapper.getParameter("emailId"));
    	String requestBody = requestWrapper.getRequestBody();    	
    	LOGGER.debug("RequestBody : ================\n {}  ",  requestBody);
    	
    	
    	JSONObject jObject = new JSONObject(requestBody);
    	String employeeNo = jObject.getString("employeeNo");
    	String emailId = jObject.getString("emailId");
 		String fullname = jObject.getString("fullname");
 		String pw = jObject.getString("pw");
 		String pwCheck = jObject.getString("pwCheck");
 		String team= jObject.getString("team");
 		String leaderYn = jObject.getString("leaderYn");
 		String adminYn = jObject.getString("adminYn");
 		
 		LOGGER.debug("파싱: {}",employeeNo+emailId+fullname+pw+pwCheck+team+leaderYn+adminYn);
    	
		// 유효성 검사 및 중복 확인
		String employeeNoRegExp = "^[0-9]{6}$";
		String idRegExp = "^[a-zA-Z0-9-_.]{1,20}@dayside.co.kr$";
		String fullnameRegExp = "^[가-힣]{2,5}$";
		String no = memberService.checkEmployeeNo(employeeNo);
		String id = memberService.checkEmailId(emailId);
		String[] teams = memberService.getAllTeam();
		// 소속팀 유효성 검사
		int cnt = 0;
		for (int i = 0; i < teams.length; i++) {
			if ((team.equals(teams[i]))) {
				
				cnt++;
				break;
			}
		}

		// 사번 유효성 검사 및 중복 확인
		if (employeeNo.matches(employeeNoRegExp) == false || employeeNo.equals(no)) {
			result = new BaseResult("NO_FAIL", "사번을 확인해주세요.");
			return;
			// 아이디 유효성 검사 및 중복 확인
		} else if (emailId.matches(idRegExp) == false || emailId.equals(id)) {
			result = new BaseResult("ID_FAIL", "아이디를 확인해주세요.");
			return;
			// 이름 유효성 검사
		} else if (fullname.matches(fullnameRegExp) == false) {
			result = new BaseResult("FULLNAME_FAIL", "이름을 확인해주세요.");
			return;
			// 비밀번호 유효성 검사
		} else if (pw.length() < 8) {
			result = new BaseResult("PW_FAIL", "비밀번호를 확인해주세요.");
			return;
			// 비밀번호 확인
		} else if (!(pw.equals(pwCheck))) {
			result = new BaseResult("PWCHECK_FAIL", "비밀번호 확인을 해주세요.");
			return;
			// 소속팀 유효성 검사
		} else if (cnt < 1) {
			result = new BaseResult("TEAM_FAIL", "소속팀을 선택해주세요");
			cnt = 0;
			return;
			// 팀장, 관리자 여부 유효성 검사
		} else if (!(leaderYn.equals("Y")) && !(leaderYn.equals("N"))) {
			result = new BaseResult("LEADERYN_FAIL", "팀장 여부를 선택해주세요.");
			return;
		} else if (!(adminYn.equals("Y")) && !(adminYn.equals("N"))) {
			result = new BaseResult("ADMINYN_FAIL", "관리자 여부를 선택해주세요.");
			return;
		}
		chain.doFilter(requestWrapper, responseWrapper);
		LOGGER.debug("회원가입 필터 끝");
	}
}
