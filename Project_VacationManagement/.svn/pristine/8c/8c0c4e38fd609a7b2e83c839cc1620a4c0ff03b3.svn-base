package com.dayside.vacation.member.controller;

import java.util.Map;
import javax.servlet.http.HttpSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.dayside.vacation.member.model.BaseResult;
import com.dayside.vacation.member.model.Member;
import com.dayside.vacation.member.service.MemberService;

@Controller
@RequestMapping("/member/*")
public class MemberController {

	private static final Logger LOGGER = LoggerFactory.getLogger(MemberController.class);

	@Autowired
	MemberService memberService;

	// 로그인 페이지(메인 페이지)
	@RequestMapping(value = "/login")
	public ModelAndView loginPage(HttpSession session) {

		ModelAndView loginView = new ModelAndView();
		loginView.setViewName("member/login_page");

		return loginView;
	}

	// 로그인 처리
	@RequestMapping(value = "/login_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult loginProcess(String emailId, String pw, HttpSession session) {

		Map<String, Object> map = memberService.getOneMember(emailId, pw);
		
		BaseResult result;
		// 아이디, 비밀번호는 맞음
		if (map != null) {
			if (map.get("joinStatus").equals("JOIN_REQUEST")) {
				result = new BaseResult("JOIN_REQUEST", "가입 요청중입니다. 관리자에게 문의해주세요.");
				// 가입 요청
			} else if (map.get("joinStatus").equals("JOIN_REJECT")) {
				// 반려
				result = new BaseResult("JOIN_REJECT", "가입이 거절되었습니다. 관리자에게 문의해주세요.");

			} else {

				session.setAttribute("memberSession", map.get("employeeNo"));
				LOGGER.debug("사번: {}", map.get("employeeNo"));
				result = new BaseResult("JOIN_APPROVAL", "가입 승인");
			}
			// 아이디, 비밀번호 틀림
		} else {

			result = new BaseResult("FAIL", "아이디 또는 비밀번호를 확인해주세요.");
		}
		LOGGER.debug("baseResult 리턴 코드: {}", result.getReturnCode());
		return result;
	}

	// 회원가입 페이지
	@RequestMapping(value = "/join")
	public ModelAndView joinPage(HttpSession session) {

		ModelAndView loginView = new ModelAndView();
		loginView.setViewName("member/join_page");

		return loginView;
	}

	// 회원가입 처리
	@RequestMapping(value = "/join_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult joinProcess(@RequestBody Member member, String pwCheck) {

		BaseResult result = null;

		// 유효성 검사 및 중복 확인
		String employeeNoRegExp = "^[0-9]{6}$";
		String idRegExp = "^[a-zA-Z0-9-_.]{1,20}@dayside.co.kr$";
		String fullnameRegExp = "^[가-힣]{2,5}$";
		String no = memberService.checkEmployeeNo(member.getEmployeeNo());
		String id = memberService.checkEmailId(member.getEmailId());
		String[] team = memberService.getAllTeam();

		// 소속팀 유효성 검사
		int cnt = 0;
		for (int i = 0; i < team.length; i++) {
			if ((member.getTeam().equals(team[i]))) {
				cnt++;
				break;
			}
		}

		// 사번 유효성 검사 및 중복 확인
		if (member.getEmployeeNo().matches(employeeNoRegExp) == false || member.getEmployeeNo().equals(no)) {
			result = new BaseResult("NO_FAIL", "사번을 확인해주세요.");
		// 아이디 유효성 검사 및 중복 확인
		} else if (member.getEmailId().matches(idRegExp) == false || member.getEmailId().equals(id)) {
			result = new BaseResult("ID_FAIL", "아이디를 확인해주세요.");
		// 이름 유효성 검사
		} else if (member.getFullname().matches(fullnameRegExp) == false) {
			LOGGER.debug("이름: {}", member.getFullname());
			result = new BaseResult("FULLNAME_FAIL", "이름을 확인해주세요.");
		// 비밀번호 유효성 검사
		} else if (member.getPw().length() < 8) {
			result = new BaseResult("PW_FAIL", "비밀번호를 확인해주세요.");
		// 비밀번호 확인
		} else if (!(member.getPw().equals(pwCheck))) {
			result = new BaseResult("PWCHECK_FAIL", "비밀번호 확인을 해주세요.");
		// 소속팀 유효성 검사
		} else if (cnt < 1) {
			result = new BaseResult("TEAM_FAIL", "소속팀을 선택해주세요");
			cnt = 0;
		// 팀장, 관리자 여부 유효성 검사
		} else if (!(member.getLeaderYn().equals("Y")) && !(member.getLeaderYn().equals("N"))) {
			result = new BaseResult("LEADERYN_FAIL", "팀장 여부를 선택해주세요.");
		} else if (!(member.getAdminYn().equals("Y")) && !(member.getAdminYn().equals("N"))) {
			result = new BaseResult("ADMINYN_FAIL", "관리자 여부를 선택해주세요.");
		} else {

			memberService.joinMember(member);

			result = new BaseResult("SUCCESS", "회원가입에 성공하셨습니다.");
		}
		return result;
	}

	// 로그아웃
	@RequestMapping(value = "/logout")
	public ModelAndView logoutProcess(HttpSession session) {

		ModelAndView loginView = new ModelAndView();
		loginView.setViewName("redirect:/member/login");

		session.removeAttribute("memberSession");
		session.invalidate();

		return loginView;
	}

	// 사번 중복 확인
	@RequestMapping(value = "/checkEmployeeNo_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult checkNo(String employeeNo) {

		BaseResult result;

		String no = memberService.checkEmployeeNo(employeeNo);
		// 중복된 사번 없음
		if (no == null) {
			LOGGER.debug("입력 받은 사번: {}", employeeNo);
			result = new BaseResult("AVAILABLE", "사용 가능한 사번입니다.");

			// 중복된 사번 있음
		} else {
			result = new BaseResult("DISAVAILABLE", "동일한 사번이 존재합니다.");
		}
		return result;
	}

	// 아이디 중복 확인
	@RequestMapping(value = "/checkEmailId_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult checkId(String emailId) {

		BaseResult result;
		String id = memberService.checkEmailId(emailId);

		// 중복된 아이디 없음
		if (id == null) {
			LOGGER.debug("입력 받은 아이디: {}", emailId);
			result = new BaseResult("AVAILABLE", "사용 가능한 아이디 입니다.");
			// 중복된 아이디 있음
		} else {
			result = new BaseResult("DISAVAILABLE", "동일한 아이디가 존재합니다.");
		}
		return result;
	}
	
	// 관리자 여부 확인
	@RequestMapping(value = "/leaderYN", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView checkLeaderYn(HttpSession session) {

		String employeeNo = (String)session.getAttribute("memberSession");
		
		String leaderYN = memberService.getLeaderYN(employeeNo);

		ModelAndView jsonView = new ModelAndView();
		
		jsonView.setViewName("jsonView");
		
		jsonView.addObject("leaderYN", leaderYN);
		
		return jsonView;
		
	}

	// 임시 테스트 휴가접수 번호 연번 테스트
	@RequestMapping(value = "/regVacationAjax", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest() {

		memberService.applyNoTest();

		BaseResult result = new BaseResult("SUCCESS", "성공");

//  ModelAndView 사용 	
//		ModelAndView modelAndView = new ModelAndView();
//		HashMap<String, String> result = new HashMap<>();
//		result.put("result", "SUCCESS");
//		modelAndView.addObject(result);
//		modelAndView.setViewName("jsonView");

		return result;
	}

	@RequestMapping(value = "/regVacationAjax1", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest1() {
		memberService.applyNoTest1();
		BaseResult result = new BaseResult("SUCCESS", "성공");
		return result;
	}

	// YYMMDD-0001-랜덤문자(체크성 문자 - )

	@RequestMapping(value = "/regVacationAjax2", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest2() {
		memberService.applyNoTest2();
		BaseResult result = new BaseResult("SUCCESS", "성공");
		return result;
	}

	@RequestMapping(value = "/regVacationAjax3", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView applyNoTest3() {		
		//memberService.applyNoTest2();	
		
		Member memberResult = new Member();
		
		memberResult.setAdminYn("Y");
		memberResult.setEmailId("lovedong");

	//  ModelAndView 사용 	
			ModelAndView modelAndView = new ModelAndView();
			modelAndView.addObject(memberResult);
			modelAndView.setViewName("jsonView");
		
		return modelAndView;
	}		

	@RequestMapping(value = "/regVacationAjax4", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public Member applyNoTest4() {		
		//memberService.applyNoTest2();
		
		Member memberResult = new Member();
		
		memberResult.setAdminYn("N");
		memberResult.setEmailId("lovedong2");
	
		return memberResult;
	}
	
	@RequestMapping(value = "/test")
	public ModelAndView test() {
		
		return new ModelAndView("vacation/test");
		
	}
	/* AJAX - 데이터
	@RequestMapping(value = "/test_ajax", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView testAjax() {
		
		ModelAndView jsonView = new ModelAndView();
		
		//List<Member> list = memberService.getMemberList();
		
		jsonView.setViewName("jsonView");
		jsonView.addObject("list", list);

		return jsonView;
		
	}*/
	
	/* AJAX - 데이터 + 코드
	@RequestMapping(value = "/test_ajax", produces = "application/json; charset=utf-8")
	public TestClass testAjax() {
		
		List<Member> list = memberService.getMemberList();
		TestClass test = new TestClass(list);
		return test;
	}
	*/
	
	
	// YYMMDD-0001-랜덤문자(체크성 문자 - )
	@RequestMapping(value = "/myTest/regVacationAjax2", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult applyNoTest2(Member member) {
		
		LOGGER.debug("member : {}",member);
		LOGGER.debug("EmailId : {}",member.getEmailId());
		
		
		//memberService.applyNoTest2();
		
		BaseResult result = new BaseResult("SUCCESS", "성공");
		return result;
	}

	@RequestMapping(value = "/myTest/regVacationAjax3", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView applyNoTest3(@RequestBody Member member) {		
		//memberService.applyNoTest2();	
		
				
		LOGGER.debug("member : {}",member);
		LOGGER.debug("EmailId : {}",member.getEmailId());
		
		Member memberResult = new Member();
		
		memberResult.setAdminYn("Y");
		memberResult.setEmailId("lovedong");

	//  ModelAndView 사용 	
			ModelAndView modelAndView = new ModelAndView();
			modelAndView.addObject(memberResult);
			modelAndView.setViewName("jsonView");
		
		return modelAndView;
	}		

	@RequestMapping(value = "/myTest2/regVacationAjax4", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public Member applyNoTest4(@RequestBody Member member) {		
		//memberService.applyNoTest2();
		
		LOGGER.debug("member : {}",member);
		LOGGER.debug("EmailId : {}",member.getEmailId());

		
		Member memberResult = new Member();
		
		memberResult.setAdminYn("N");
		memberResult.setEmailId("lovedong2");
	
		return memberResult;
	}
}




	
	
	

