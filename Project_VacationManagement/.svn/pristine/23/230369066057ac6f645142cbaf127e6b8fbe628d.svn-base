package com.dayside.vacation.vacation.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.dayside.vacation.member.model.BaseResult;
import com.dayside.vacation.member.service.MemberService;
import com.dayside.vacation.vacation.model.Vacation;
import com.dayside.vacation.vacation.service.VacationService;

@Controller
@RequestMapping("/*")
public class VacationController {

	private static final Logger LOGGER = LoggerFactory.getLogger(VacationController.class);

	@Autowired
	MemberService memberService;
	@Autowired
	VacationService vacationService;

	// 휴가 신청 목록 페이지
	@RequestMapping("/list")
	public ModelAndView listPage(HttpSession session) {

		// 1. 로그인 안된 상태이면 로그인 페이지로 이동시키기
		if (session.getAttribute("memberSession") == null) {

			ModelAndView loginView = new ModelAndView();

			loginView.setViewName("member/login_page");

			return loginView;
		}
		// 2. 로그인 상태이면 내가 신청한 휴가 목록 조회
		String employeeNo = (String) session.getAttribute("memberSession");

		List<Map<String, Object>> list = vacationService.getVacationInfo(employeeNo);

		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/list");
		listView.addObject("list", list);

		return listView;
	}

	// 휴가 신청 페이지
	@RequestMapping("/request")
	public ModelAndView requestPage(HttpSession session) {

		// 1. 로그인 안된 상태이면 로그인 페이지로 이동시키기
		if (session.getAttribute("memberSession") == null) {

			ModelAndView loginView = new ModelAndView();

			loginView.setViewName("member/login_page");

			return loginView;
		}
		// 2. 로그인 상태이면 휴가 신청 페이지로 이동(사번, 이름 자동 출력)

		String employeeNo = (String) session.getAttribute("memberSession");

		Map<String, Object> map = memberService.getNoName(employeeNo);

		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/request_page");
		listView.addObject("map", map);

		return listView;
	}

	// 휴가 신청 처리
	@RequestMapping(value = "/request_process", method = RequestMethod.POST)
	public BaseResult requestProcess(String startDate, String startType, String endDate, String endType,
			HttpSession session) throws ParseException {

		String employeeNo = (String) session.getAttribute("memberSession");

		Vacation vacation = new Vacation();
		vacation.setEmployeeNo(employeeNo);

		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");

		Date startDt = fm.parse(startDate);
		Date endDt = fm.parse(endDate);

		long calDate = endDt.getTime() - startDt.getTime();
		int calDateDays = (int) (calDate / (24 * 60 * 60 * 1000));
		float half = 0.5f;

		if (endType == null) {
			endType = "-";
		}

		vacation.setStartDt(startDt);
		vacation.setEndDt(endDt);
		vacation.setStartType(startType);
		vacation.setEndType(endType);

		// 시작일 = 종료일
		if (calDateDays == 0) {
			// 시작일: 종일
			if (!startType.equals("ALLDAY")) {
				vacation.setCountDays(half);
				// 시작일: 오전 or 오후
			} else {
				vacation.setCountDays(calDateDays + 1);
			}
			// 종료일 - 시작일 = 1
		} else if (calDateDays == 1) {
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + 1);
					// 종료일: 오후
				} else {
					vacation.setCountDays(calDateDays + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + half);
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + half);
				}
			}
			// 종료일 - 시작일 > 1
		} else if (calDateDays > 1) {
			
			// 기간 중 주말 빼기
			Calendar start = Calendar.getInstance();
			start.setTime(startDt);
			Calendar end = Calendar.getInstance();
			end.setTime(endDt);
			int weekday = 0;
			while (!start.after(end)) {
				int day = start.get(Calendar.DAY_OF_WEEK);
				if ((day != Calendar.SATURDAY) && (day != Calendar.SUNDAY)) {
					weekday++;
				}
					
				start.add(Calendar.DATE, 1);
			}
			
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(weekday);
					// 종료일: 오후
				} else {
					vacation.setCountDays((weekday-1) + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(half + (weekday-1));
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + (weekday-2) + half);
				}
			}
		}

		vacationService.requestVacation(vacation);

		BaseResult result = new BaseResult();

		return result;
	}

	// 휴가 승인 수
	@RequestMapping(value = "/count_vacation", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView countVacation(HttpSession session) {

		String employeeNo = (String) session.getAttribute("memberSession");
		float cnt = vacationService.getVacationCount(employeeNo);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");
		jsonView.addObject("cnt", cnt);

		return jsonView;
	}

	// 휴가 취소
	@RequestMapping(value = "/cancel_process", method = RequestMethod.POST)
	public BaseResult cancelProcess(String applyNo) {
		vacationService.cancelVacation(applyNo);

		BaseResult result = new BaseResult();

		return result;

	}

	// 휴가 수정 페이지
	@RequestMapping(value = "/update_page")
	public ModelAndView updatePage(String applyNo) {

		Vacation vacation = vacationService.getOneVacationInfo(applyNo);
		Map<String, Object> map = memberService.getNoName(vacation.getEmployeeNo());
		ModelAndView listView = new ModelAndView();
		listView.setViewName("vacation/update_page");
		listView.addObject("vacation", vacation);
		listView.addObject("fullname", map.get("fullname"));

		return listView;
	}

	// 휴가 수정 처리
	@RequestMapping(value = "/update_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult updateProcess(String applyNo, String startDate, String startType, String endDate, String endType,
			HttpSession session) throws ParseException {

		Vacation vacation = new Vacation();

		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");

		Date startDt = fm.parse(startDate);
		Date endDt = fm.parse(endDate);

		long calDate = endDt.getTime() - startDt.getTime();
		int calDateDays = (int) (calDate / (24 * 60 * 60 * 1000));
		float half = 0.5f;

		if (endType == null) {
			endType = "-";
		}

		vacation.setVacationApplyNo(applyNo);
		vacation.setStartDt(startDt);
		vacation.setEndDt(endDt);
		vacation.setStartType(startType);
		vacation.setEndType(endType);

		// 시작일 = 종료일
		if (calDateDays == 0) {
			// 시작일: 종일
			if (!startType.equals("ALLDAY")) {
				vacation.setCountDays(half);
				// 시작일: 오전 or 오후
			} else {
				vacation.setCountDays(calDateDays + 1);
			}
			// 종료일 - 시작일 = 1
		} else if (calDateDays == 1) {
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + 1);
					// 종료일: 오후
				} else {
					vacation.setCountDays(calDateDays + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + half);
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + half);
				}
			}
			// 종료일 - 시작일 > 1
		} else if (calDateDays > 1) {
			// 시작일: 종일
			if (startType.equals("ALLDAY")) {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(calDateDays + 1);
					// 종료일: 오후
				} else {
					vacation.setCountDays(calDateDays + half);
				}
				// 시작일: 오후
			} else {
				// 종료일: 종일
				if (endType.equals("ALLDAY")) {
					vacation.setCountDays(half + calDateDays);
					// 종료일: 오전
				} else {
					vacation.setCountDays(half + calDateDays - 1 + half);
				}
			}
		}

		vacationService.updateVacation(vacation);

		BaseResult result = new BaseResult();
		return result;
	}

	// 휴가 상태
	@RequestMapping(value = "/vacation_status", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView vacationStatus(String applyNo) {

		String vacationStatus = vacationService.getVacationStatus(applyNo);

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");
		jsonView.addObject("status", vacationStatus);

		return jsonView;
	}

}
