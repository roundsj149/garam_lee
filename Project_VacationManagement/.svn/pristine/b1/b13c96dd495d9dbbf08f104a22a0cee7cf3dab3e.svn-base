package com.dayside.vacation.common.filter;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;

import com.dayside.vacation.member.service.MemberService;

public class JoinCheckFilter implements Filter {

	@Autowired
	MemberService memberService;
	
	@Override
	public void destroy() {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// TODO Auto-generated method stub

	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
			throws IOException, ServletException {

		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) resp;
		
		String employeeNo = (String)request.getParameter("employeeNo");
		String emailId = (String)request.getParameter("emailId");
		String fullname = (String)request.getParameter("fullname");
		String pw = (String)request.getParameter("pw");
		String pwCheck = (String)request.getParameter("pwCheck");
		String team = (String)request.getParameter("team");
		String leaderYn = (String)request.getParameter("leaderYn");
		String adminYn = (String)request.getParameter("adminYn");
		System.out.println(employeeNo+emailId+fullname+pw+pwCheck+team+leaderYn+adminYn);
		String no = memberService.checkEmployeeNo(employeeNo);
		/*
// 유효성 검사 및 중복 확인
		String employeeNoRegExp = "^[0-9]{6}$";
		String idRegExp = "^[a-zA-Z0-9-_.]{1,20}@dayside.co.kr$";
		String fullnameRegExp = "^[가-힣]{2,5}$";
		String no = memberService.checkEmployeeNo(member.getEmployeeNo());
		String id = memberService.checkEmailId(member.getEmailId());
		String[] team = memberService.getAllTeam();

		// 소속팀 유효성 검사
		int cnt = 0;
		for (int i = 0; i < team.length; i++) {
			if ((member.getTeam().equals(team[i]))) {
				cnt++;
				break;
			}
		}

		// 사번 유효성 검사 및 중복 확인
		if (member.getEmployeeNo().matches(employeeNoRegExp) == false || member.getEmployeeNo().equals(no)) {
			result = new BaseResult("NO_FAIL", "사번을 확인해주세요.");
		// 아이디 유효성 검사 및 중복 확인
		} else if (member.getEmailId().matches(idRegExp) == false || member.getEmailId().equals(id)) {
			result = new BaseResult("ID_FAIL", "아이디를 확인해주세요.");
		// 이름 유효성 검사
		} else if (member.getFullname().matches(fullnameRegExp) == false) {
			LOGGER.debug("이름: {}", member.getFullname());
			result = new BaseResult("FULLNAME_FAIL", "이름을 확인해주세요.");
		// 비밀번호 유효성 검사
		} else if (member.getPw().length() < 8) {
			result = new BaseResult("PW_FAIL", "비밀번호를 확인해주세요.");
		// 비밀번호 확인
		} else if (!(member.getPw().equals(pwCheck))) {
			result = new BaseResult("PWCHECK_FAIL", "비밀번호 확인을 해주세요.");
		// 소속팀 유효성 검사
		} else if (cnt < 1) {
			result = new BaseResult("TEAM_FAIL", "소속팀을 선택해주세요");
			cnt = 0;
		// 팀장, 관리자 여부 유효성 검사
		} else if (!(member.getLeaderYn().equals("Y")) && !(member.getLeaderYn().equals("N"))) {
			result = new BaseResult("LEADERYN_FAIL", "팀장 여부를 선택해주세요.");
		} else if (!(member.getAdminYn().equals("Y")) && !(member.getAdminYn().equals("N"))) {
			result = new BaseResult("ADMINYN_FAIL", "관리자 여부를 선택해주세요.");
		} else {

			memberService.joinMember(member);

			result = new BaseResult("SUCCESS", "회원가입에 성공하셨습니다.");
		}
		 */
		
		chain.doFilter(request, response);
	}
}
