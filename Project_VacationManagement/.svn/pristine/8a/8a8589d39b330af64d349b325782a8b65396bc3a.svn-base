package com.dayside.vacation.overtime.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpSession;
import org.apache.commons.text.StringEscapeUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.dayside.vacation.member.model.BaseResult;
import com.dayside.vacation.member.service.MemberService;
import com.dayside.vacation.overtime.model.Overtime;
import com.dayside.vacation.overtime.service.OvertimeService;

@Controller
@RequestMapping("/overtime/*")
public class OvertimeController {

	private static final Logger LOGGER = LoggerFactory.getLogger(OvertimeController.class);

	@Autowired
	MemberService memberService;
	@Autowired
	OvertimeService overtimeService;

	// 초과근무 신청 목록 페이지
	@RequestMapping(value = "/list")
	public ModelAndView listPage() {

		ModelAndView listView = new ModelAndView();
		listView.setViewName("overtime/list");

		return listView;

	}

	// 초과근무 목록 가져오기
	@RequestMapping(value = "/search_overtime", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView searchOvertime(HttpSession session, String searchWord, String selectYear, int currPage) {

		BaseResult result = new BaseResult();
		String selectYearRegExp = "/^[0-9]{4}$";
		String currPageRegExp = "/^[0-9]{1,10}$";
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();

		if (selectYear == null || selectYear.matches(selectYearRegExp)) {
			LOGGER.debug("연도 에러: " + selectYear);
			result = new BaseResult("SELECT_YEAR_INVALID", "연도가 유효하지 않습니다.");
		}
		if (Integer.toString(currPage).matches(currPageRegExp)) {
			LOGGER.debug("페이지 에러: " + Integer.toString(currPage));
			result = new BaseResult("CURRENT_PAGE_INVALID", "페이지가 유효하지 않습니다.");
		}
		if (currPage < 1) {
			currPage = 1;
		}

		String employeeNo = (String) session.getAttribute("memberSession");

		String adminYN = memberService.getAdminYN(employeeNo);

		if (adminYN == null) {
			result = new BaseResult("FAIL", "관리자 여부 확인에 실패하셨습니다.");
		}
		if (adminYN.equals("Y")) {
			employeeNo = null;
		}

		try {
			list = overtimeService.getOvertimeInfo(employeeNo, searchWord, selectYear, currPage);
			result = new BaseResult("SUCCESS", "초과근무 조회에 성공하셨습니다.");
		} catch (Exception e) {
			result = new BaseResult("FAIL", "초과근무 조회에 실패하셨습니다.");
		}

		ModelAndView jsonView = new ModelAndView();
		
		jsonView.setViewName("jsonView");
		jsonView.addObject("list", list);
		jsonView.addObject("result", result);
		LOGGER.debug("초과근무 목록 가져오기 컨트롤러");
		return jsonView;
	}

	// 초과근무 신청 페이지
	@RequestMapping(value = "/request")
	public ModelAndView requestPage(HttpSession session) {

		String employeeNo = (String) session.getAttribute("memberSession");

		Map<String, Object> map = memberService.getNoName(employeeNo);

		ModelAndView listView = new ModelAndView();
		listView.setViewName("overtime/request_page");
		listView.addObject("map", map);

		return listView;
	}

	// 초과근무 신청 처리
	@RequestMapping(value = "/request_process", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public BaseResult requestProcess(String startDate, int sHour, int sMinute, String endDate, int eHour, int eMinute,
			String overtimeType, String overtimeContent, HttpSession session) throws ParseException {
		BaseResult result = new BaseResult();
		
		String employeeNo = (String) session.getAttribute("memberSession");

		/* 유효성 검사 추가 해야함! */
		String dateRegExp = "/^[0-9]{2}.-[0-9]{2}.-[0-9]{2}$";
		String typeRegExp = "/^[A-Z]{7,9}$";

		if (startDate == null || startDate.matches(dateRegExp)) {
			LOGGER.debug("시작일 에러");
			result = new BaseResult("START_DT_FAIL", "출근일이 유효하지 않습니다.");
		}
		if (endDate == null || endDate.matches(dateRegExp)) {
			LOGGER.debug("종료일 에러");
			result = new BaseResult("END_DT_FAIL", "퇴근일이 유효하지 않습니다.");
		}
		if (overtimeType == null || overtimeType.matches(typeRegExp)) {
			LOGGER.debug("종료 형태 에러");
			result = new BaseResult("START_TYPE_FAIL", "근무 형태가 유효하지 않습니다.");
		}

		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
		Date startDt = fm.parse(startDate);
		Date endDt = fm.parse(endDate);

		Calendar cal = Calendar.getInstance();
		cal.setTime(startDt);
		cal.set(Calendar.HOUR_OF_DAY, sHour);
		cal.set(Calendar.MINUTE, sMinute);
		Date sDate = cal.getTime();
		cal.setTime(endDt);
		cal.set(Calendar.HOUR_OF_DAY, eHour);
		cal.set(Calendar.MINUTE, eMinute);
		Date eDate = cal.getTime();
		LOGGER.debug("출근일시: " + sDate);
		LOGGER.debug("퇴근일시: " + eDate);

		SimpleDateFormat fm2 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String start = fm2.format(sDate);
		String end = fm2.format(eDate);
		LOGGER.debug("치환 전: \n{}",overtimeContent);
		String content = StringEscapeUtils.escapeHtml4(overtimeContent);
		LOGGER.debug("치환 후: \n{}",content);
		Overtime overtime = new Overtime();
		overtime.setEmployeeNo(employeeNo);
		overtime.setStartDt(start);
		overtime.setEndDt(end);
		overtime.setOvertimeType(overtimeType);
		overtime.setOvertimeContent(content);

		try {
			overtimeService.requestOvertime(overtime);
			result = new BaseResult("SUCCESS", "초과근무 신청에 성공하셨습니다.");
		} catch (Exception e) {
			result = new BaseResult("FAIL", "초과근무 신청에 실패하셨습니다.");
		}
		return result;
	}

	// 총 게시물 수
	@RequestMapping(value = "/count_all_overtime", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ModelAndView countAllOvertime(HttpSession session, String searchWord, String selectYear) {

		BaseResult result = new BaseResult();
		String employeeNo = (String) session.getAttribute("memberSession");
		String adminYN = memberService.getAdminYN(employeeNo);
		int cntAllOvertime = 0;

		if (adminYN == null) {
			result = new BaseResult("FAIL", "관리자 여부 확인에 실패하셨습니다.");
		}
		if (adminYN.equals("Y")) {
			employeeNo = null;
		}

		try {
			cntAllOvertime = overtimeService.getAllOvertimeCount(employeeNo, searchWord, selectYear);
			result = new BaseResult("SUCCESS", "총 게시물 수 조회에 성공하셨습니다.");
			LOGGER.debug("총 게시물 수(컨트롤러): {}", cntAllOvertime);
		} catch (Exception e) {
			result = new BaseResult("COUNT_VACATION_FAIL", "총 게시물 수 조회에 실패하셨습니다.");
		}

		ModelAndView jsonView = new ModelAndView();

		jsonView.setViewName("jsonView");
		jsonView.addObject("cntAllOvertime", cntAllOvertime);
		jsonView.addObject("result", result);

		return jsonView;
	}

}
